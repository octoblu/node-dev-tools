#!/bin/bash


add_badges_to_readme(){
  local name="$(get_name_from_package_json)"
  local readme="README.md"
  echo "" >> "${readme}"
  echo "[![Build Status](https://travis-ci.org/octoblu/${name}.svg?branch=master)](https://travis-ci.org/octoblu/${name})" >> "${readme}"
  echo "[![Test Coverage](https://codecov.io/gh/octoblu/${name}/branch/master/graph/badge.svg)](https://codecov.io/gh/octoblu/${name})" >> "${readme}"
  echo "[![Dependency status](http://img.shields.io/david/octoblu/${name}.svg?style=flat)](https://david-dm.org/octoblu/${name})" >> "${readme}"
  echo "[![devDependency Status](http://img.shields.io/david/dev/octoblu/${name}.svg?style=flat)](https://david-dm.org/octoblu/${name}#info=devDependencies)" >> "${readme}"
  echo "[![Slack Status](http://community-slack.octoblu.com/badge.svg)](http://community-slack.octoblu.com)" >> "${readme}"
  echo "" >> "${readme}"
  echo "[![NPM](https://nodei.co/npm/${name}.svg?style=flat)](https://npmjs.org/package/${name})" >> "${readme}"
}

copy_templates(){
  mkdir -p test
  cp "${TEMPLATES_DIR}/mocha.opts" test/
  cp "${TEMPLATES_DIR}/test_helper.coffee" test/
  cp "${TEMPLATES_DIR}/codeclimate.yml" .codeclimate.yml
  cp "${TEMPLATES_DIR}/coffeelint.json" coffeelint.json
}

get_name_from_package_json(){
  local name="$(cat package.json | jq -r '.name')"
  echo "$name"
}

get_templates_dir(){
  local hop="$BASH_SOURCE"
  local original_dir="$CWD"

  cd "$(dirname $hop)"
  while [ -n "$(readlink "${hop}")" ]; do
    hop="$(readlink "${hop}")"
    cd "$(dirname "${hop}")"
  done

  local script_directory="$(pwd)"
  cd "${original_dir}"
  echo "${script_directory}/../templates/testify"
}

install_npm_modules(){
  npm install --save-dev coffee-script mocha sinon chai sinon-chai nyc mocha-multi mocha-osx-reporter chai-subset env-test
}

update_package_json(){
  local name="$(cat package.json | jq -r '.name')"
  cat package.json | \
    jq 'setpath(["scripts", "test"]; "mocha") | setpath(["scripts", "coverage"]; "nyc npm test") | setpath(["scripts", "mocha:json"]; "mocha --reporter json > coverage/mocha.json") | setpath(["nyc", "cache"]; true) | setpath(["nyc", "reporter"]; ["text-summary","lcov","json"]) | setpath(["nyc", "extension"]; [".coffee"]) | setpath(["scripts", "test:watch"]; "mocha -w -R mocha-multi --reporter-options spec=-,mocha-osx-reporter=-")' > package.json.temp && \
    mv package.json.temp package.json
}

add_to_gitignore() {
  local gitignore=".gitignore"
  local gitignore_temp=".gitignore.temp"
  if [ -f "${gitignore}" ]; then
    cat "${gitignore}" |
    grep -v ".nyc_output" >> "${gitignore_temp}"
    echo ".nyc_output" >> "${gitignore_temp}"
    mv "${gitignore_temp}" "${gitignore}"
  fi
}

main(){
  TEMPLATES_DIR="$(get_templates_dir)"

  install_npm_modules
  add_to_gitignore
  copy_templates
  travisify $@
  update_package_json
  echo "We modified your package.json 'npm test' command. Sorry?"

  echo "And now we are about to ruin your README.md #sorrynotsorry"
  grep 'Build Status' README.md &> /dev/null
  if [ $? -eq 0 ]; then
    echo "... uhh nvm."
    exit 0
  fi
  add_badges_to_readme
}
main $@
